--- a/ap.c
+++ b/ap.c
@@ -1161,14 +1161,17 @@ static enum sigma_cmd_result cmd_ap_set_
 	}
 
 	val = get_param(cmd, "TxBF");
-	if (val)
+	if (val) {
 		dut->ap_txBF = strcasecmp(val, "enable") == 0;
+		dut->he_sounding = 0;
+	}
 
 	val = get_param(cmd, "MU_TxBF");
 	if (val) {
 		if (strcasecmp(val, "enable") == 0) {
 			dut->ap_txBF = 1;
 			dut->ap_mu_txBF = 1;
+			dut->he_sounding = 0;
 		} else if (strcasecmp(val, "disable") == 0) {
 			dut->ap_txBF = 0;
 			dut->ap_mu_txBF = 0;
@@ -8483,6 +8486,10 @@ skip_key_mgmt:
 						   ifname, dut->he_mcs);
 		}
 
+		if (dut->he_sounding)
+			run_system_wrapper(dut, "ath11k-fwtest -i %s -m 0x47 -v 0 7 0",
+					   ifname);
+
 	}
 
 	if (dut->program == PROGRAM_60GHZ && dut->ap_num_ese_allocs > 0) {
@@ -8955,6 +8962,8 @@ static enum sigma_cmd_result cmd_ap_rese
 		dut->ap_txBF = 1;
 		dut->ap_mu_txBF = 1;
 		dut->ap_numsounddim = -1;
+		dut->he_sounding = 1;
+		dut->he_ackpolicymac = 0;
 		if (dut->device_type == AP_testbed) {
 			dut->ap_amsdu = VALUE_DISABLED;
 			dut->ap_bcc = VALUE_DISABLED;
@@ -8967,6 +8976,7 @@ static enum sigma_cmd_result cmd_ap_rese
 			dut->ap_tx_streams = 2;
 			dut->ap_txBF = 0;
 			dut->ap_mu_txBF = 0;
+			dut->he_sounding = 0;
 			dut->ap_ba_bufsize = BA_BUFSIZE_64;
                }
 	}
@@ -13146,6 +13156,40 @@ static int mac80211_set_trigger_type(str
 	return SUCCESS_SEND_STATUS;
 }
 
+static void mac80211_set_ackpolicy_0(struct sigma_dut *dut, const char *ifname,
+				     unsigned char *mac_addr)
+{
+	if (dut->he_ackpolicymac != 1)
+		return;
+
+	/*Disable all-BAR ackpolicy for MUMIMO*/
+	run_system_wrapper(dut, "ath11k-fwtest -i %s -m 0x48 -v 0 62 0",
+			   ifname);
+	/*Disable all-BAR ackpolicy first*/
+	run_system_wrapper(dut, "ath11k-fwtest -i %s -m 0x48 -v 0 64 0",
+			   ifname);
+	/*Set normal ack policy for the STA with the specified mac address in dl-tx case*/
+	run_system_wrapper(dut, "ath11k-fwtest -i %s -m 0x4b -v 0 8 1 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
+			   ifname, mac_addr[0], mac_addr[1], mac_addr[2],
+			   mac_addr[3], mac_addr[4], mac_addr[5]);
+}
+
+static void mac80211_set_ackpolicy_3(struct sigma_dut *dut, const char *ifname)
+{
+	/*Enable all-BAR ackpolicy for MUMIMO DL*/
+	run_system_wrapper(dut, "ath11k-fwtest -i %s -m 0x48 -v 0 62 1",
+			   ifname);
+	/*Enable all-BAR ackpolicy*/
+	run_system_wrapper(dut, "ath11k-fwtest -i %s -m 0x48 -v 0 64 1",
+			   ifname);
+}
+
+static void mac80211_set_ackpolicy_4(struct sigma_dut *dut, const char *ifname)
+{
+	/*Enable htp-ack ackpolicy*/
+	run_system_wrapper(dut, "ath11k-fwtest -i %s -m 0x47 -v 0 99 1",
+			   ifname);
+}
 
 static int16_t mac80211_he_ltf_mapping(struct sigma_dut *dut,
 				       struct sigma_conn *conn,
@@ -13231,6 +13275,7 @@ static int mac80211_ap_set_rfeature(stru
 {
 	const char *val;
 	char *ifname, *type = "he";
+	unsigned char mac_addr[ETH_ALEN];
 
 	ifname = get_main_ifname();
 	val = get_param(cmd, "RTS_FORCE");
@@ -13294,6 +13339,37 @@ static int mac80211_ap_set_rfeature(stru
 		return STATUS_SENT_ERROR;
 	}
 
+	val = get_param(cmd, "AckPolicy_MAC");
+	if (val) {
+		dut->he_ackpolicymac = 1;
+		memset(mac_addr, '0', ETH_ALEN);
+		if (parse_mac_address(dut, val, mac_addr) < 0) {
+			sigma_dut_print(dut, DUT_MSG_ERROR,
+					"MAC Address not in proper format");
+			return INVALID_SEND_STATUS;
+		}
+	}
+
+	val = get_param(cmd, "AckPolicy");
+	if (val) {
+		dut->ap_he_ackpolicy = atoi(val);
+
+		switch (dut->ap_he_ackpolicy) {
+		case 0:
+			mac80211_set_ackpolicy_0(dut, ifname, mac_addr);
+			break;
+		case 3:
+			mac80211_set_ackpolicy_3(dut, ifname);
+			break;
+		case 4:
+			mac80211_set_ackpolicy_4(dut, ifname);
+			break;
+		default:
+			sigma_dut_print(dut, DUT_MSG_ERROR,
+					"Invalid AckPolicy setting");
+		}
+	}
+
 	/* Extract LTF value before GI because in case of auto-rate,
 	 * dut->ar_ltf should be set before calling
 	 * mac80211_he_ar_gi_ltf_mask()
--- a/sigma_dut.h
+++ b/sigma_dut.h
@@ -903,6 +903,9 @@ struct sigma_dut {
 	bool wifi_hal_initialized;
 #endif /*ANDROID_WIFI_HAL*/
 	int he_mcs;
+	int he_ackpolicymac;
+	int ap_he_ackpolicy;
+	int he_sounding;
 };
 
 
