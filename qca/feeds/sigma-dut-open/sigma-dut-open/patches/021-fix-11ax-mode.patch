--- a/ap.c
+++ b/ap.c
@@ -423,7 +423,7 @@ static enum ap_mode get_mode(const char
 		return AP_11ac;
 	else if (strcasecmp(str, "11ad") == 0)
 		return AP_11ad;
-	else if (strcasecmp(str, "11ax") == 0 || strcasecmp(str, "ax") == 0)
+	else if (strcasecmp(str, "11ax") == 0)
 		return AP_11ax;
 	else
 		return AP_inval;
@@ -607,6 +607,10 @@ static enum sigma_cmd_result cmd_ap_set_
 			pos++;
 			dut->ap_channel_1 = atoi(pos);
 		}
+		if (dut->ap_channel >= 36)
+			dut->use_5g=1;
+		else
+			dut->use_5g=0;
 	}
 
 	/* Overwrite the AP channel with DFS channel if configured */
@@ -645,8 +649,9 @@ static enum sigma_cmd_result cmd_ap_set_
 			free(str);
 			return 0;
 		}
-		if ((dut->ap_mode == AP_11ac || dut->ap_mode == AP_11ax)
-		     && dut->ap_80plus80 != 1)
+		if ((dut->ap_mode == AP_11ac ||
+		     (dut->ap_mode == AP_11ax && dut->use_5g)) &&
+		      dut->ap_80plus80 != 1)
 			dut->ap_chwidth = AP_80;
 
 		if (pos) {
@@ -657,7 +662,8 @@ static enum sigma_cmd_result cmd_ap_set_
 				free(str);
 				return 0;
 			}
-			if (dut->ap_mode_1 == AP_11ac || dut->ap_mode == AP_11ax)
+			if (dut->ap_mode_1 == AP_11ac ||
+			    (dut->ap_mode == AP_11ax && dut->use_5g))
 				dut->ap_chwidth_1 = AP_80;
 			dut->ap_is_dual = 1;
 		}
@@ -6959,7 +6965,7 @@ enum sigma_cmd_result cmd_ap_config_comm
 		break;
 	case AP_11ax:
 		ifname = get_main_ifname();
-		if (dut->ap_channel >= 36)
+		if (dut->use_5g)
 			fprintf(f, "hw_mode=a\n");
 		else
 			fprintf(f, "hw_mode=g\n");
@@ -6976,11 +6982,14 @@ enum sigma_cmd_result cmd_ap_config_comm
 
 	if ((drv == DRIVER_MAC80211 || drv == DRIVER_QNXNTO ||
 	     drv == DRIVER_LINUX_WCN) &&
-	    (dut->ap_mode == AP_11ng || dut->ap_mode == AP_11na)) {
+	    (dut->ap_mode == AP_11ng || dut->ap_mode == AP_11na ||
+	     (dut->ap_mode == AP_11ax && !dut->use_5g))) {
 		int ht40plus = 0, ht40minus = 0;
 		char ht_caps[60];
 		int len = 0;
 
+		if (dut->ap_mode == AP_11ax)
+                        fprintf(f, "ieee80211ax=1\n");
 		fprintf(f, "ieee80211n=1\n");
 		if (dut->ap_mode == AP_11ng &&
 		    (dut->ap_chwidth == AP_40 ||
@@ -7029,14 +7038,15 @@ enum sigma_cmd_result cmd_ap_config_comm
 
 	if ((drv == DRIVER_MAC80211 || drv == DRIVER_QNXNTO ||
 	     drv == DRIVER_LINUX_WCN) &&
-	     (dut->ap_mode == AP_11ac || dut->ap_mode == AP_11ax)) {
+	     (dut->ap_mode == AP_11ac ||
+	      (dut->ap_mode == AP_11ax && dut->use_5g))) {
 		int ht40plus = 0, ht40minus = 0;
 
 		if (dut->ap_mode == AP_11ax)
 			fprintf(f, "ieee80211ax=1\n");
 
-		fprintf(f, "ieee80211ac=1\n"
-			"ieee80211n=1\n");
+		fprintf(f, "ieee80211ac=1\n");
+		fprintf(f, "ieee80211n=1\n");
 
 		/* configure ht_capab based on channel width */
 		if (dut->ap_chwidth != AP_20) {
@@ -7054,7 +7064,7 @@ enum sigma_cmd_result cmd_ap_config_comm
 	if ((drv == DRIVER_MAC80211 || drv == DRIVER_QNXNTO ||
 	     drv == DRIVER_LINUX_WCN) &&
 	    (dut->ap_mode == AP_11ac || dut->ap_mode == AP_11na ||
-	     (dut->ap_mode == AP_11ax && dut->ap_channel >= 36))) {
+	     (dut->ap_mode == AP_11ax && dut->use_5g))) {
 		if (dut->ap_countrycode[0])
 			fprintf(f, "country_code=%s\n", dut->ap_countrycode);
                 else
@@ -7710,7 +7720,8 @@ skip_key_mgmt:
 			fprintf(f, "fragment_size=128\n");
 	}
 
-	if (dut->program == PROGRAM_VHT || dut->program == PROGRAM_HE) {
+	if (dut->program == PROGRAM_VHT ||
+	    (dut->program == PROGRAM_HE && dut->use_5g)) {
 		int vht_oper_centr_freq_idx;
 		char vht_capab[256] = "";
 		int len = 0;
@@ -7779,13 +7790,6 @@ skip_key_mgmt:
 	if (dut->program == PROGRAM_HE) {
 		int he_oper_centr_freq_idx;
 
-		if (check_channel(dut->ap_channel) < 0) {
-			send_resp(dut, conn, SIGMA_INVALID,
-				  "errorCode,Invalid channel");
-			fclose(f);
-			return 0;
-		}
-
 		switch (dut->ap_chwidth) {
 		case AP_20:
 			dut->ap_oper_chwidth = AP_20_40_OPER_CHWIDTH;
@@ -7812,14 +7816,22 @@ skip_key_mgmt:
 							    dut->ap_channel);
 			break;
 		default:
-			dut->ap_oper_chwidth = HE_DEFAULT_OPER_CHWIDTH;
-			he_oper_centr_freq_idx =
-				get_oper_centr_freq_seq_idx(80,
+			if (dut->use_5g) {
+				dut->ap_oper_chwidth = HE_5G_DEFAULT_OPER_CHWIDTH;
+				he_oper_centr_freq_idx =
+					get_oper_centr_freq_seq_idx(80,
+							    dut->ap_channel);
+			} else {
+				dut->ap_oper_chwidth = HE_2G_DEFAULT_OPER_CHWIDTH;
+				he_oper_centr_freq_idx =
+				get_oper_centr_freq_seq_idx(20,
 							    dut->ap_channel);
+			}
 			break;
 		}
-		fprintf(f, "he_oper_centr_freq_seg0_idx=%d\n",
-			he_oper_centr_freq_idx);
+		if (dut->use_5g)
+			fprintf(f, "he_oper_centr_freq_seg0_idx=%d\n",
+				he_oper_centr_freq_idx);
 		fprintf(f, "he_oper_chwidth=%d\n", dut->ap_oper_chwidth);
 		fprintf(f, "he_su_beamformer=%d\n", dut->ap_txBF);
 		fprintf(f, "he_mu_beamformer=%d\n", dut->ap_mu_txBF);
@@ -8641,11 +8653,8 @@ static enum sigma_cmd_result cmd_ap_rese
 
 	if (dut->program == PROGRAM_HE) {
 		dut->ap_mode = AP_11ax;
-		dut->ap_channel = 36;
-		dut->ap_chwidth = AP_80;
 		dut->ap_bcc = VALUE_DISABLED;
 		dut->ap_ampdu = VALUE_NOT_SET;
-		dut->ap_dfs_mode = AP_DFS_MODE_ENABLED;
 		dut->ap_he_frag = VALUE_NOT_SET;
 		dut->ap_he_dlofdma = VALUE_NOT_SET;
 		dut->ap_he_ulofdma = VALUE_NOT_SET;
--- a/sigma_dut.h
+++ b/sigma_dut.h
@@ -83,7 +83,8 @@ struct sigma_dut;
 
 /* Set default operating channel width 80 MHz */
 #define VHT_DEFAULT_OPER_CHWIDTH AP_80_OPER_CHWIDTH
-#define HE_DEFAULT_OPER_CHWIDTH AP_80_OPER_CHWIDTH
+#define HE_2G_DEFAULT_OPER_CHWIDTH AP_20_40_OPER_CHWIDTH
+#define HE_5G_DEFAULT_OPER_CHWIDTH AP_80_OPER_CHWIDTH
 
 typedef unsigned int u32;
 typedef uint16_t u16;
@@ -337,6 +338,7 @@ enum akm_suite_values {
 };
 
 struct sigma_dut {
+	int use_5g;
 	int s; /* server TCP socket */
 	int debug_level;
 	int stdout_debug;
