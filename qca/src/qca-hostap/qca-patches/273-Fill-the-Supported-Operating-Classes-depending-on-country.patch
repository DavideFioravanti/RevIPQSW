diff --git a/src/common/ieee802_11_common.c b/src/common/ieee802_11_common.c
index 185a9d2..a553ab1 100644
--- a/src/common/ieee802_11_common.c
+++ b/src/common/ieee802_11_common.c
@@ -16,6 +16,107 @@
 #include "ieee802_11_defs.h"
 #include "ieee802_11_common.h"
 
+struct country_op_class us_op_class[] = {
+        { 1, 115 },
+        { 2, 118 },
+        { 3, 124 },
+        { 4, 121 },
+        { 5, 125 },
+        { 6, 103 },
+        { 7, 103 },
+        { 8, 102 },
+        { 9, 102 },
+        { 10, 101},
+        { 11, 101},
+        { 12, 81 },
+        { 13, 94 },
+        { 14, 95 },
+        { 15, 96 },
+        { 22, 116 },
+        { 23, 119 },
+        { 24, 122 },
+        { 25, 126 },
+        { 26, 126 },
+        { 27, 117 },
+        { 28, 120 },
+        { 29, 123 },
+        { 30, 127 },
+        { 31, 127 },
+        { 32, 83 },
+        { 33, 84 },
+        { 34, 180 },
+        { 128, 128},
+        { 129, 129},
+        { 130, 130},
+};
+
+struct country_op_class eu_op_class[] = {
+        { 1, 115 },
+        { 2, 118 },
+        { 3, 121 },
+        { 4, 81 },
+        { 5, 116 },
+        { 6, 119 },
+        { 7, 122 },
+        { 8, 117 },
+        { 9, 120 },
+        { 10, 123 },
+        { 11, 83 },
+        { 12, 84 },
+        { 17, 125 },
+        { 18, 180 },
+        { 128, 128 },
+        { 129, 129 },
+        { 130, 130 },
+};
+
+/*Note: To be updated as per latest standard */
+struct country_op_class jp_op_class[] = {
+        { 1, 115 },
+        { 30, 81 },
+        { 31, 82 },
+        { 32, 118 },
+        { 33, 118 },
+        { 34, 121 },
+        { 35, 121 },
+        { 36, 116 },
+        { 37, 119 },
+        { 38, 119 },
+        { 39, 122 },
+        { 40, 122 },
+        { 41, 117 },
+        { 42, 120 },
+        { 43, 120 },
+        { 44, 123 },
+        { 45, 123 },
+        { 56, 83 },
+        { 57, 84 },
+        { 58, 121 },
+        { 59, 180 },
+        { 128, 128 },
+        { 129, 129 },
+        { 130, 130 },
+};
+
+struct country_op_class cn_op_class[] = {
+        { 1, 115 },
+        { 2, 118 },
+        { 3, 125 },
+        { 4, 116 },
+        { 5, 119 },
+        { 6, 126 },
+        { 7, 81 },
+        { 8, 83 },
+        { 9, 84 },
+        { 128, 128 },
+        { 129, 129 },
+        { 130, 130 },
+};
+
+size_t us_op_class_size = ARRAY_SIZE(us_op_class);
+size_t eu_op_class_size = ARRAY_SIZE(eu_op_class);
+size_t jp_op_class_size = ARRAY_SIZE(jp_op_class);
+size_t cn_op_class_size = ARRAY_SIZE(cn_op_class);
 
 static int ieee802_11_parse_vendor_specific(const u8 *pos, size_t elen,
 					    struct ieee802_11_elems *elems,
@@ -981,28 +1082,7 @@ int ieee80211_chaninfo_to_channel(unsigned int freq, enum chan_width chanwidth,
 	return 0;
 }
 
-
-static const char *const us_op_class_cc[] = {
-	"US", "CA", NULL
-};
-
-static const char *const eu_op_class_cc[] = {
-	"AL", "AM", "AT", "AZ", "BA", "BE", "BG", "BY", "CH", "CY", "CZ", "DE",
-	"DK", "EE", "EL", "ES", "FI", "FR", "GE", "HR", "HU", "IE", "IS", "IT",
-	"LI", "LT", "LU", "LV", "MD", "ME", "MK", "MT", "NL", "NO", "PL", "PT",
-	"RO", "RS", "RU", "SE", "SI", "SK", "TR", "UA", "UK", NULL
-};
-
-static const char *const jp_op_class_cc[] = {
-	"JP", NULL
-};
-
-static const char *const cn_op_class_cc[] = {
-	"CN", NULL
-};
-
-
-static int country_match(const char *const cc[], const char *const country)
+int country_match(const char *const cc[], const char *const country)
 {
 	int i;
 
@@ -1808,82 +1888,6 @@ size_t add_multi_ap_ie(u8 *buf, size_t len, u8 value)
 	return pos - buf;
 }
 
-
-static const struct country_op_class us_op_class[] = {
-	{ 1, 115 },
-	{ 2, 118 },
-	{ 3, 124 },
-	{ 4, 121 },
-	{ 5, 125 },
-	{ 12, 81 },
-	{ 22, 116 },
-	{ 23, 119 },
-	{ 24, 122 },
-	{ 25, 126 },
-	{ 26, 126 },
-	{ 27, 117 },
-	{ 28, 120 },
-	{ 29, 123 },
-	{ 30, 127 },
-	{ 31, 127 },
-	{ 32, 83 },
-	{ 33, 84 },
-	{ 34, 180 },
-};
-
-static const struct country_op_class eu_op_class[] = {
-	{ 1, 115 },
-	{ 2, 118 },
-	{ 3, 121 },
-	{ 4, 81 },
-	{ 5, 116 },
-	{ 6, 119 },
-	{ 7, 122 },
-	{ 8, 117 },
-	{ 9, 120 },
-	{ 10, 123 },
-	{ 11, 83 },
-	{ 12, 84 },
-	{ 17, 125 },
-	{ 18, 180 },
-};
-
-static const struct country_op_class jp_op_class[] = {
-	{ 1, 115 },
-	{ 30, 81 },
-	{ 31, 82 },
-	{ 32, 118 },
-	{ 33, 118 },
-	{ 34, 121 },
-	{ 35, 121 },
-	{ 36, 116 },
-	{ 37, 119 },
-	{ 38, 119 },
-	{ 39, 122 },
-	{ 40, 122 },
-	{ 41, 117 },
-	{ 42, 120 },
-	{ 43, 120 },
-	{ 44, 123 },
-	{ 45, 123 },
-	{ 56, 83 },
-	{ 57, 84 },
-	{ 58, 121 },
-	{ 59, 180 },
-};
-
-static const struct country_op_class cn_op_class[] = {
-	{ 1, 115 },
-	{ 2, 118 },
-	{ 3, 125 },
-	{ 4, 116 },
-	{ 5, 119 },
-	{ 6, 126 },
-	{ 7, 81 },
-	{ 8, 83 },
-	{ 9, 84 },
-};
-
 static u8
 global_op_class_from_country_array(u8 op_class, size_t array_size,
 				   const struct country_op_class *country_array)
diff --git a/src/common/ieee802_11_common.h b/src/common/ieee802_11_common.h
index 77965d8..77be9a9 100644
--- a/src/common/ieee802_11_common.h
+++ b/src/common/ieee802_11_common.h
@@ -153,6 +153,44 @@ struct ieee802_11_elems {
 
 typedef enum { ParseOK = 0, ParseUnknown = 1, ParseFailed = -1 } ParseRes;
 
+struct country_op_class {
+	u8 country_op_class;
+	u8 global_op_class;
+};
+
+static const char *const us_op_class_cc[] = {
+	"US", "CA", NULL
+};
+
+static const char *const eu_op_class_cc[] = {
+	"AL", "AM", "AT", "AZ", "BA", "BE", "BG", "BY", "CH", "CY", "CZ", "DE",
+	"DK", "EE", "EL", "ES", "FI", "FR", "GE", "HR", "HU", "IE", "IS", "IT",
+	"LI", "LT", "LU", "LV", "MD", "ME", "MK", "MT", "NL", "NO", "PL", "PT",
+	"RO", "RS", "RU", "SE", "SI", "SK", "TR", "UA", "UK", NULL
+};
+
+static const char *const jp_op_class_cc[] = {
+	"JP", NULL
+};
+
+static const char *const cn_op_class_cc[] = {
+	"CN", NULL
+};
+
+extern struct country_op_class us_op_class[];
+
+extern struct country_op_class eu_op_class[];
+
+/*Note: To be updated as per latest standard */
+extern struct country_op_class jp_op_class[];
+
+extern struct country_op_class cn_op_class[];
+
+extern size_t us_op_class_size;
+extern size_t eu_op_class_size;
+extern size_t jp_op_class_size;
+extern size_t cn_op_class_size;
+
 ParseRes ieee802_11_parse_elems(const u8 *start, size_t len,
 				struct ieee802_11_elems *elems,
 				int show_errors);
@@ -174,6 +212,7 @@ int hostapd_config_wmm_ac(struct hostapd_wmm_ac_params wmm_ac_params[],
 			  const char *name, const char *val);
 enum hostapd_hw_mode ieee80211_freq_to_chan(int freq, u8 *channel);
 int ieee80211_chan_to_freq(const char *country, u8 op_class, u8 chan);
+int country_match(const char *const cc[], const char *const country);
 enum hostapd_hw_mode ieee80211_freq_to_channel_ext(unsigned int freq,
 						   int sec_channel, int vht,
 						   u8 *op_class, u8 *channel);
@@ -213,11 +252,6 @@ size_t mbo_add_ie(u8 *buf, size_t len, const u8 *attr, size_t attr_len);
 
 size_t add_multi_ap_ie(u8 *buf, size_t len, u8 value);
 
-struct country_op_class {
-	u8 country_op_class;
-	u8 global_op_class;
-};
-
 u8 country_to_global_op_class(const char *country, u8 op_class);
 
 const struct oper_class_map * get_oper_class(const char *country, u8 op_class);
diff --git a/wpa_supplicant/op_classes.c b/wpa_supplicant/op_classes.c
index e916b0b..4465bd9 100644
--- a/wpa_supplicant/op_classes.c
+++ b/wpa_supplicant/op_classes.c
@@ -377,8 +377,13 @@ size_t wpas_supp_op_class_ie(struct wpa_supplicant *wpa_s,
 {
 	struct wpabuf *buf;
 	u8 op, current, chan;
+	char country[2];
+	struct country_op_class *country_array = NULL;
 	u8 *ie_len;
+	const u8 *country_ie;
 	size_t res;
+	size_t size = 0;
+	const struct oper_class_map *g_op_idx = NULL;
 
 	/*
 	 * Determine correct mode, bandwidth and secondary channel
@@ -399,12 +404,52 @@ size_t wpas_supp_op_class_ie(struct wpa_supplicant *wpa_s,
 	/* Will set the length later, putting a placeholder */
 	ie_len = wpabuf_put(buf, 1);
 	wpabuf_put_u8(buf, current);
-
-	for (op = 0; global_op_class[op].op_class; op++) {
-		if (wpas_op_class_supported(wpa_s, ssid, &global_op_class[op]))
-			wpabuf_put_u8(buf, global_op_class[op].op_class);
+	country_ie = wpa_bss_get_ie(bss, WLAN_EID_COUNTRY);
+	if (!country_ie) {
+		wpabuf_free(buf);
+		return 0;
+	}
+	memcpy(country, country_ie + 2, 2);
+
+	if (country_match(us_op_class_cc, country)) {
+		country_array = us_op_class;
+		size = us_op_class_size;
+	} else if (country_match(eu_op_class_cc, country)) {
+		country_array = eu_op_class;
+		size = eu_op_class_size;
+	} else if (country_match(jp_op_class_cc, country)) {
+		country_array = jp_op_class;
+		size = jp_op_class_size;
+	} else if (country_match(cn_op_class_cc, country)) {
+		country_array = cn_op_class;
+		size = cn_op_class_size;
 	}
 
+	/*
+	 * For 6G channels use global operating class table.
+	 * For non-6G use country specific operating class table.
+	 * For countries not in the list of countries, use global
+	 * operating class table.
+	 */
+#define SIXG_FIRST_CFREQ 5945
+	if (country_array && bss->freq < SIXG_FIRST_CFREQ) {
+		for (op = 0; op < size; op++) {
+			g_op_idx = get_oper_class(country,
+					country_array[op].country_op_class);
+			if (g_op_idx &&  wpas_op_class_supported(wpa_s, ssid,
+						    g_op_idx)) {
+				wpabuf_put_u8(buf,
+					      country_array[op].global_op_class);
+			}
+		}
+	} else {
+		for (op = 0; global_op_class[op].op_class; op++) {
+		     if (wpas_op_class_supported(wpa_s, ssid,
+					      &global_op_class[op])) {
+			  wpabuf_put_u8(buf, global_op_class[op].op_class);
+		     }
+		}
+	}
 	*ie_len = wpabuf_len(buf) - 2;
 	if (*ie_len < 2 || wpabuf_len(buf) > len) {
 		wpa_printf(MSG_ERROR,
